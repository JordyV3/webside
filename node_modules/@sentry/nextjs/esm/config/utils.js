import { __read } from "tslib";
import * as fs from 'fs';
import * as path from 'path';
export var SENTRY_CLIENT_CONFIG_FILE = './sentry.client.config.js';
export var SENTRY_SERVER_CONFIG_FILE = './sentry.server.config.js';
// this is where the transpiled/bundled version of `SENTRY_SERVER_CONFIG_FILE` will end up
export var SERVER_SDK_INIT_PATH = 'sentry/initServerSDK.js';
/**
 * Store the path to the bundled version of the user's server config file (where `Sentry.init` is called).
 *
 * @param config Incoming webpack configuration, passed to the `webpack` function we set in the nextjs config.
 */
export function storeServerConfigFileLocation(config) {
    var outputLocation = path.dirname(path.join(config.output.path, config.output.filename));
    var serverSDKInitOutputPath = path.join(outputLocation, SERVER_SDK_INIT_PATH);
    var projectDir = config.context;
    setRuntimeEnvVars(projectDir, {
        // ex: .next/server/sentry/initServerSdk.js
        SENTRY_SERVER_INIT_PATH: path.relative(projectDir, serverSDKInitOutputPath),
    });
}
/**
 * Set variables to be added to the env at runtime, by storing them in `.env.local` (which `next` automatically reads
 * into memory at server startup).
 *
 * @param projectDir The path to the project root
 * @param vars Object containing vars to set
 */
export function setRuntimeEnvVars(projectDir, vars) {
    // ensure the file exists
    var envFilePath = path.join(projectDir, '.env.local');
    if (!fs.existsSync(envFilePath)) {
        fs.writeFileSync(envFilePath, '');
    }
    var fileContents = fs
        .readFileSync(envFilePath)
        .toString()
        .trim();
    Object.entries(vars).forEach(function (entry) {
        var _a = __read(entry, 2), varName = _a[0], value = _a[1];
        var envVarString = varName + "=" + value;
        // new entry
        if (!fileContents.includes(varName)) {
            fileContents = fileContents + "\n" + envVarString;
        }
        // existing entry; make sure value is up to date
        else {
            fileContents = fileContents.replace(new RegExp(varName + "=\\S+"), envVarString);
        }
    });
    fs.writeFileSync(envFilePath, fileContents.trim() + "\n");
}
//# sourceMappingURL=utils.js.map