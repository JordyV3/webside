{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/config/index.ts"],"names":[],"mappings":";AACA,OAAO,EAAE,8BAA8B,EAAE,MAAM,WAAW,CAAC;AAE3D;;;;;;GAMG;AACH,MAAM,UAAU,gBAAgB,CAC9B,cAAuC,EACvC,8BAAwE;IADxE,+BAAA,EAAA,mBAAuC;IACvC,+CAAA,EAAA,mCAAwE;IAExE,IAAM,gBAAgB,GAAG,8BAA8B,CAAC,cAAc,EAAE,8BAA8B,CAAC,CAAC;IAExG,IAAM,eAAe,GAAG,UACtB,KAAa,EACb,QAAuD;QAEvD,IAAM,0BAA0B,GAC9B,OAAO,cAAc,KAAK,UAAU,CAAC,CAAC,CAAC,cAAc,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC;QAE1F,6BACK,0BAA0B;YAC7B,2FAA2F;YAC3F,2BAA2B,EAAE,IAAI,EACjC,OAAO,EAAE,gBAAgB,IACzB;IACJ,CAAC,CAAC;IAEF,OAAO,eAAe,CAAC;AACzB,CAAC","sourcesContent":["import { ExportedNextConfig, NextConfigFunction, NextConfigObject, SentryWebpackPluginOptions } from './types';\nimport { constructWebpackConfigFunction } from './webpack';\n\n/**\n * Add Sentry options to the config to be exported from the user's `next.config.js` file.\n *\n * @param userNextConfig The existing config to be exported prior to adding Sentry\n * @param userSentryWebpackPluginOptions Configuration for SentryWebpackPlugin\n * @returns The modified config to be exported\n */\nexport function withSentryConfig(\n  userNextConfig: ExportedNextConfig = {},\n  userSentryWebpackPluginOptions: Partial<SentryWebpackPluginOptions> = {},\n): NextConfigFunction {\n  const newWebpackExport = constructWebpackConfigFunction(userNextConfig, userSentryWebpackPluginOptions);\n\n  const finalNextConfig = (\n    phase: string,\n    defaults: { defaultConfig: { [key: string]: unknown } },\n  ): NextConfigObject => {\n    const materializedUserNextConfig =\n      typeof userNextConfig === 'function' ? userNextConfig(phase, defaults) : userNextConfig;\n\n    return {\n      ...materializedUserNextConfig,\n      // TODO When we add a way to disable the webpack plugin, doing so should turn this off, too\n      productionBrowserSourceMaps: true,\n      webpack: newWebpackExport,\n    };\n  };\n\n  return finalNextConfig;\n}\n"]}