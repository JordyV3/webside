{"version":3,"file":"webpack.js","sourceRoot":"","sources":["../../src/config/webpack.ts"],"names":[],"mappings":"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","sourcesContent":["import { getSentryRelease } from '@sentry/node';\nimport { dropUndefinedKeys, logger } from '@sentry/utils';\nimport * as SentryWebpackPlugin from '@sentry/webpack-plugin';\n\nimport {\n  BuildContext,\n  EntryPointObject,\n  EntryPropertyObject,\n  ExportedNextConfig,\n  SentryWebpackPluginOptions,\n  WebpackConfigFunction,\n  WebpackConfigObject,\n  WebpackEntryProperty,\n} from './types';\nimport {\n  SENTRY_CLIENT_CONFIG_FILE,\n  SENTRY_SERVER_CONFIG_FILE,\n  SERVER_SDK_INIT_PATH,\n  storeServerConfigFileLocation,\n} from './utils';\n\nexport { SentryWebpackPlugin };\n\n// TODO: merge default SentryWebpackPlugin ignore with their SentryWebpackPlugin ignore or ignoreFile\n// TODO: merge default SentryWebpackPlugin include with their SentryWebpackPlugin include\n// TODO: drop merged keys from override check? `includeDefaults` option?\n\nconst defaultSentryWebpackPluginOptions = dropUndefinedKeys({\n  url: process.env.SENTRY_URL,\n  org: process.env.SENTRY_ORG,\n  project: process.env.SENTRY_PROJECT,\n  authToken: process.env.SENTRY_AUTH_TOKEN,\n  configFile: 'sentry.properties',\n  stripPrefix: ['webpack://_N_E/'],\n  urlPrefix: `~/_next`,\n  include: '.next/',\n  ignore: ['.next/cache', 'server/ssr-module-cache.js', 'static/*/_ssgManifest.js', 'static/*/_buildManifest.js'],\n});\n\n/**\n * Construct the function which will be used as the nextjs config's `webpack` value.\n *\n * Sets:\n *   - `devtool`, to ensure high-quality sourcemaps are generated\n *   - `entry`, to include user's sentry config files (where `Sentry.init` is called) in the build\n *   - `plugins`, to add SentryWebpackPlugin (TODO: optional)\n *\n * @param userNextConfig The user's existing nextjs config, as passed to `withSentryConfig`\n * @param userSentryWebpackPluginOptions The user's SentryWebpackPlugin config, as passed to `withSentryConfig`\n * @returns The function to set as the nextjs config's `webpack` value\n */\nexport function constructWebpackConfigFunction(\n  userNextConfig: ExportedNextConfig = {},\n  userSentryWebpackPluginOptions: Partial<SentryWebpackPluginOptions> = {},\n): WebpackConfigFunction {\n  const newWebpackFunction = (config: WebpackConfigObject, options: BuildContext): WebpackConfigObject => {\n    // if we're building server code, store the webpack output path as an env variable, so we know where to look for the\n    // webpack-processed version of `sentry.server.config.js` when we need it\n    if (config.target === 'node') {\n      storeServerConfigFileLocation(config);\n    }\n\n    let newConfig = config;\n\n    // if user has custom webpack config (which always takes the form of a function), run it so we have actual values to\n    // work with\n    if ('webpack' in userNextConfig && typeof userNextConfig.webpack === 'function') {\n      newConfig = userNextConfig.webpack(config, options);\n    }\n\n    // Ensure quality source maps in production. (Source maps aren't uploaded in dev, and besides, Next doesn't let you\n    // change this is dev even if you want to - see\n    // https://github.com/vercel/next.js/blob/master/errors/improper-devtool.md.)\n    if (!options.dev) {\n      // TODO Handle possibility that user is using `SourceMapDevToolPlugin` (see\n      // https://webpack.js.org/plugins/source-map-dev-tool-plugin/)\n      // TODO Give user option to use `hidden-source-map` ?\n      newConfig.devtool = 'source-map';\n    }\n\n    // Tell webpack to inject user config files (containing the two `Sentry.init()` calls) into the appropriate output\n    // bundles. Store a separate reference to the original `entry` value to avoid an infinite loop. (If we don't do\n    // this, we'll have a statement of the form `x.y = () => f(x.y)`, where one of the things `f` does is call `x.y`.\n    // Since we're setting `x.y` to be a callback (which, by definition, won't run until some time later), by the time\n    // the function runs (causing `f` to run, causing `x.y` to run), `x.y` will point to the callback itself, rather\n    // than its original value. So calling it will call the callback which will call `f` which will call `x.y` which\n    // will call the callback which will call `f` which will call `x.y`... and on and on. Theoretically this could also\n    // be fixed by using `bind`, but this is way simpler.)\n    const origEntryProperty = newConfig.entry;\n    newConfig.entry = async () => addSentryToEntryProperty(origEntryProperty, options.isServer);\n\n    // Add the Sentry plugin, which uploads source maps to Sentry when not in dev\n    checkWebpackPluginOverrides(userSentryWebpackPluginOptions);\n    newConfig.plugins = newConfig.plugins || [];\n    newConfig.plugins.push(\n      // @ts-ignore Our types for the plugin are messed up somehow - TS wants this to be `SentryWebpackPlugin.default`,\n      // but that's not actually a thing\n      new SentryWebpackPlugin({\n        dryRun: options.dev,\n        release: getSentryRelease(options.buildId),\n        ...defaultSentryWebpackPluginOptions,\n        ...userSentryWebpackPluginOptions,\n      }),\n    );\n\n    return newConfig;\n  };\n\n  return newWebpackFunction;\n}\n\n/**\n * Modify the webpack `entry` property so that the code in `sentry.server.config.js` and `sentry.client.config.js` is\n * included in the the necessary bundles.\n *\n * @param origEntryProperty The value of the property before Sentry code has been injected\n * @param isServer A boolean provided by nextjs indicating whether we're handling the server bundles or the browser\n * bundles\n * @returns The value which the new `entry` property (which will be a function) will return (TODO: this should return\n * the function, rather than the function's return value)\n */\nasync function addSentryToEntryProperty(\n  origEntryProperty: WebpackEntryProperty,\n  isServer: boolean,\n): Promise<EntryPropertyObject> {\n  // The `entry` entry in a webpack config can be a string, array of strings, object, or function. By default, nextjs\n  // sets it to an async function which returns the promise of an object of string arrays. Because we don't know whether\n  // someone else has come along before us and changed that, we need to check a few things along the way. The one thing\n  // we know is that it won't have gotten *simpler* in form, so we only need to worry about the object and function\n  // options. See https://webpack.js.org/configuration/entry-context/#entry.\n\n  let newEntryProperty = origEntryProperty;\n  if (typeof origEntryProperty === 'function') {\n    newEntryProperty = await origEntryProperty();\n  }\n  newEntryProperty = newEntryProperty as EntryPropertyObject;\n\n  // Add a new element to the `entry` array, we force webpack to create a bundle out of the user's\n  // `sentry.server.config.js` file and output it to `SERVER_INIT_LOCATION`. (See\n  // https://webpack.js.org/guides/code-splitting/#entry-points.) We do this so that the user's config file is run\n  // through babel (and any other processors through which next runs the rest of the user-provided code - pages, API\n  // routes, etc.). Specifically, we need any ESM-style `import` code to get transpiled into ES5, so that we can call\n  // `require()` on the resulting file when we're instrumenting the sesrver. (We can't use a dynamic import there\n  // because that then forces the user into a particular TS config.)\n\n  // On the server, create a separate bundle, as there's no one entry point depended on by all the others\n  if (isServer) {\n    // slice off the final `.js` since webpack is going to add it back in for us, and we don't want to end up with\n    // `.js.js` as the extension\n    newEntryProperty[SERVER_SDK_INIT_PATH.slice(0, -3)] = SENTRY_SERVER_CONFIG_FILE;\n  }\n  // On the client, it's sufficient to inject it into the `main` JS code, which is included in every browser page.\n  else {\n    addFileToExistingEntryPoint(newEntryProperty, 'main', SENTRY_CLIENT_CONFIG_FILE);\n\n    // To work around a bug in nextjs, we need to ensure that the `main.js` entry is empty (otherwise it'll choose that\n    // over `main` and we'll lose the change we just made). In case some other library has put something into it, copy\n    // its contents over before emptying it out. See\n    // https://github.com/getsentry/sentry-javascript/pull/3696#issuecomment-863363803.)\n    const mainjsValue = newEntryProperty['main.js'];\n    if (Array.isArray(mainjsValue) && mainjsValue.length > 0) {\n      const mainValue = newEntryProperty.main;\n\n      // copy the `main.js` entries over\n      newEntryProperty.main = Array.isArray(mainValue)\n        ? [...mainjsValue, ...mainValue]\n        : { ...(mainValue as EntryPointObject), import: [...mainjsValue, ...(mainValue as EntryPointObject).import] };\n\n      // nuke the entries\n      newEntryProperty['main.js'] = [];\n    }\n  }\n\n  return newEntryProperty;\n}\n\n/**\n * Add a file to a specific element of the given `entry` webpack config property.\n *\n * @param entryProperty The existing `entry` config object\n * @param entryPointName The key where the file should be injected\n * @param filepath The path to the injected file\n */\nfunction addFileToExistingEntryPoint(\n  entryProperty: EntryPropertyObject,\n  entryPointName: string,\n  filepath: string,\n): void {\n  // can be a string, array of strings, or object whose `import` property is one of those two\n  let injectedInto = entryProperty[entryPointName];\n\n  // Sometimes especially for older next.js versions it happens we don't have an entry point\n  if (!injectedInto) {\n    // eslint-disable-next-line no-console\n    console.error(`[Sentry] Can't inject ${filepath}, no entrypoint is defined.`);\n    return;\n  }\n\n  // We inject the user's client config file after the existing code so that the config file has access to\n  // `publicRuntimeConfig`. See https://github.com/getsentry/sentry-javascript/issues/3485\n  if (typeof injectedInto === 'string') {\n    injectedInto = [injectedInto, filepath];\n  } else if (Array.isArray(injectedInto)) {\n    injectedInto = [...injectedInto, filepath];\n  } else {\n    let importVal: string | string[];\n\n    if (typeof injectedInto.import === 'string') {\n      importVal = [injectedInto.import, filepath];\n    } else {\n      importVal = [...injectedInto.import, filepath];\n    }\n\n    injectedInto = {\n      ...injectedInto,\n      import: importVal,\n    };\n  }\n\n  entryProperty[entryPointName] = injectedInto;\n}\n\n/**\n * Check the SentryWebpackPlugin options provided by the user against the options we set by default, and warn if any of\n * our default options are getting overridden. (Note: If any of our default values is undefined, it won't be included in\n * the warning.)\n *\n * @param userSentryWebpackPluginOptions The user's SentryWebpackPlugin options\n */\nfunction checkWebpackPluginOverrides(userSentryWebpackPluginOptions: Partial<SentryWebpackPluginOptions>): void {\n  // warn if any of the default options for the webpack plugin are getting overridden\n  const sentryWebpackPluginOptionOverrides = Object.keys(defaultSentryWebpackPluginOptions)\n    .concat('dryrun')\n    .filter(key => key in userSentryWebpackPluginOptions);\n  if (sentryWebpackPluginOptionOverrides.length > 0) {\n    logger.warn(\n      '[Sentry] You are overriding the following automatically-set SentryWebpackPlugin config options:\\n' +\n        `\\t${sentryWebpackPluginOptionOverrides.toString()},\\n` +\n        \"which has the possibility of breaking source map upload and application. This is only a good idea if you know what you're doing.\",\n    );\n  }\n}\n"]}