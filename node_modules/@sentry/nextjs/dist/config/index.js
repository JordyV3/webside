Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var webpack_1 = require("./webpack");
/**
 * Add Sentry options to the config to be exported from the user's `next.config.js` file.
 *
 * @param userNextConfig The existing config to be exported prior to adding Sentry
 * @param userSentryWebpackPluginOptions Configuration for SentryWebpackPlugin
 * @returns The modified config to be exported
 */
function withSentryConfig(userNextConfig, userSentryWebpackPluginOptions) {
    if (userNextConfig === void 0) { userNextConfig = {}; }
    if (userSentryWebpackPluginOptions === void 0) { userSentryWebpackPluginOptions = {}; }
    var newWebpackExport = webpack_1.constructWebpackConfigFunction(userNextConfig, userSentryWebpackPluginOptions);
    var finalNextConfig = function (phase, defaults) {
        var materializedUserNextConfig = typeof userNextConfig === 'function' ? userNextConfig(phase, defaults) : userNextConfig;
        return tslib_1.__assign(tslib_1.__assign({}, materializedUserNextConfig), { 
            // TODO When we add a way to disable the webpack plugin, doing so should turn this off, too
            productionBrowserSourceMaps: true, webpack: newWebpackExport });
    };
    return finalNextConfig;
}
exports.withSentryConfig = withSentryConfig;
//# sourceMappingURL=index.js.map