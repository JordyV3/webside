{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/config/utils.ts"],"names":[],"mappings":";;AAAA,uBAAyB;AACzB,2BAA6B;AAIhB,QAAA,yBAAyB,GAAG,2BAA2B,CAAC;AACxD,QAAA,yBAAyB,GAAG,2BAA2B,CAAC;AACrE,0FAA0F;AAC7E,QAAA,oBAAoB,GAAG,yBAAyB,CAAC;AAE9D;;;;GAIG;AACH,SAAgB,6BAA6B,CAAC,MAA2B;IACvE,IAAM,cAAc,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC3F,IAAM,uBAAuB,GAAG,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,4BAAoB,CAAC,CAAC;IAChF,IAAM,UAAU,GAAG,MAAM,CAAC,OAAO,CAAC;IAClC,iBAAiB,CAAC,UAAU,EAAE;QAC5B,2CAA2C;QAC3C,uBAAuB,EAAE,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,uBAAuB,CAAC;KAC5E,CAAC,CAAC;AACL,CAAC;AARD,sEAQC;AAED;;;;;;GAMG;AACH,SAAgB,iBAAiB,CAAC,UAAkB,EAAE,IAA+B;IACnF,yBAAyB;IACzB,IAAM,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC;IACxD,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC,EAAE;QAC/B,EAAE,CAAC,aAAa,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;KACnC;IAED,IAAI,YAAY,GAAG,EAAE;SAClB,YAAY,CAAC,WAAW,CAAC;SACzB,QAAQ,EAAE;SACV,IAAI,EAAE,CAAC;IAEV,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,UAAA,KAAK;QAC1B,IAAA,6BAAwB,EAAvB,eAAO,EAAE,aAAc,CAAC;QAC/B,IAAM,YAAY,GAAM,OAAO,SAAI,KAAO,CAAC;QAE3C,YAAY;QACZ,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE;YACnC,YAAY,GAAM,YAAY,UAAK,YAAc,CAAC;SACnD;QACD,gDAAgD;aAC3C;YACH,YAAY,GAAG,YAAY,CAAC,OAAO,CAAC,IAAI,MAAM,CAAI,OAAO,UAAO,CAAC,EAAE,YAAY,CAAC,CAAC;SAClF;IACH,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,aAAa,CAAC,WAAW,EAAK,YAAY,CAAC,IAAI,EAAE,OAAI,CAAC,CAAC;AAC5D,CAAC;AA3BD,8CA2BC","sourcesContent":["import * as fs from 'fs';\nimport * as path from 'path';\n\nimport { WebpackConfigObject } from './types';\n\nexport const SENTRY_CLIENT_CONFIG_FILE = './sentry.client.config.js';\nexport const SENTRY_SERVER_CONFIG_FILE = './sentry.server.config.js';\n// this is where the transpiled/bundled version of `SENTRY_SERVER_CONFIG_FILE` will end up\nexport const SERVER_SDK_INIT_PATH = 'sentry/initServerSDK.js';\n\n/**\n * Store the path to the bundled version of the user's server config file (where `Sentry.init` is called).\n *\n * @param config Incoming webpack configuration, passed to the `webpack` function we set in the nextjs config.\n */\nexport function storeServerConfigFileLocation(config: WebpackConfigObject): void {\n  const outputLocation = path.dirname(path.join(config.output.path, config.output.filename));\n  const serverSDKInitOutputPath = path.join(outputLocation, SERVER_SDK_INIT_PATH);\n  const projectDir = config.context;\n  setRuntimeEnvVars(projectDir, {\n    // ex: .next/server/sentry/initServerSdk.js\n    SENTRY_SERVER_INIT_PATH: path.relative(projectDir, serverSDKInitOutputPath),\n  });\n}\n\n/**\n * Set variables to be added to the env at runtime, by storing them in `.env.local` (which `next` automatically reads\n * into memory at server startup).\n *\n * @param projectDir The path to the project root\n * @param vars Object containing vars to set\n */\nexport function setRuntimeEnvVars(projectDir: string, vars: { [key: string]: string }): void {\n  // ensure the file exists\n  const envFilePath = path.join(projectDir, '.env.local');\n  if (!fs.existsSync(envFilePath)) {\n    fs.writeFileSync(envFilePath, '');\n  }\n\n  let fileContents = fs\n    .readFileSync(envFilePath)\n    .toString()\n    .trim();\n\n  Object.entries(vars).forEach(entry => {\n    const [varName, value] = entry;\n    const envVarString = `${varName}=${value}`;\n\n    // new entry\n    if (!fileContents.includes(varName)) {\n      fileContents = `${fileContents}\\n${envVarString}`;\n    }\n    // existing entry; make sure value is up to date\n    else {\n      fileContents = fileContents.replace(new RegExp(`${varName}=\\\\S+`), envVarString);\n    }\n  });\n\n  fs.writeFileSync(envFilePath, `${fileContents.trim()}\\n`);\n}\n"]}