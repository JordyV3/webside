{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/jordy/Documents/GitHub/webside/pages/p/[slug].js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { MDXRemote } from \"next-mdx-remote\";\nimport { MDXComponents, Layout } from \"@/components\";\nimport { getFiles, getFileBySlug } from \"@/lib/mdx\";\nexport default function Page({\n  source,\n  frontmatter\n}) {\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    type: \"page\",\n    metadata: frontmatter,\n    children: /*#__PURE__*/_jsxDEV(MDXRemote, _objectSpread(_objectSpread({}, source), {}, {\n      components: MDXComponents\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n}\nexport async function getStaticPaths() {\n  const pages = await getFiles(\"pages\");\n  const paths = pages.map(page => ({\n    params: {\n      slug: page.replace(/\\.mdx/, \"\")\n    }\n  }));\n  return {\n    paths,\n    fallback: false\n  };\n}\nexport async function getStaticProps({\n  params\n}) {\n  const {\n    source,\n    frontmatter\n  } = await getFileBySlug(\"pages\", params.slug);\n  return {\n    props: {\n      source,\n      frontmatter\n    }\n  };\n}","map":{"version":3,"sources":["/Users/jordy/Documents/GitHub/webside/pages/p/[slug].js"],"names":["MDXRemote","MDXComponents","Layout","getFiles","getFileBySlug","Page","source","frontmatter","getStaticPaths","pages","paths","map","page","params","slug","replace","fallback","getStaticProps","props"],"mappings":";;;;;;;;;AAAA,SAASA,SAAT,QAA0B,iBAA1B;AAEA,SAASC,aAAT,EAAwBC,MAAxB,QAAsC,cAAtC;AACA,SAASC,QAAT,EAAmBC,aAAnB,QAAwC,WAAxC;AAEA,eAAe,SAASC,IAAT,CAAc;AAAEC,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAAd,EAAuC;AACpD,sBACE,QAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,MAAb;AAAoB,IAAA,QAAQ,EAAEA,WAA9B;AAAA,2BACE,QAAC,SAAD,kCAAeD,MAAf;AAAuB,MAAA,UAAU,EAAEL;AAAnC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;AAED,OAAO,eAAeO,cAAf,GAAgC;AACrC,QAAMC,KAAK,GAAG,MAAMN,QAAQ,CAAC,OAAD,CAA5B;AACA,QAAMO,KAAK,GAAGD,KAAK,CAACE,GAAN,CAAWC,IAAD,KAAW;AACjCC,IAAAA,MAAM,EAAE;AACNC,MAAAA,IAAI,EAAEF,IAAI,CAACG,OAAL,CAAa,OAAb,EAAsB,EAAtB;AADA;AADyB,GAAX,CAAV,CAAd;AAMA,SAAO;AACLL,IAAAA,KADK;AAELM,IAAAA,QAAQ,EAAE;AAFL,GAAP;AAID;AAED,OAAO,eAAeC,cAAf,CAA8B;AAAEJ,EAAAA;AAAF,CAA9B,EAA0C;AAC/C,QAAM;AAAEP,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAA0B,MAAMH,aAAa,CAAC,OAAD,EAAUS,MAAM,CAACC,IAAjB,CAAnD;AAEA,SAAO;AACLI,IAAAA,KAAK,EAAE;AACLZ,MAAAA,MADK;AAELC,MAAAA;AAFK;AADF,GAAP;AAMD","sourcesContent":["import { MDXRemote } from \"next-mdx-remote\";\n\nimport { MDXComponents, Layout } from \"@/components\";\nimport { getFiles, getFileBySlug } from \"@/lib/mdx\";\n\nexport default function Page({ source, frontmatter }) {\n  return (\n    <Layout type=\"page\" metadata={frontmatter}>\n      <MDXRemote {...source} components={MDXComponents} />\n    </Layout>\n  );\n}\n\nexport async function getStaticPaths() {\n  const pages = await getFiles(\"pages\");\n  const paths = pages.map((page) => ({\n    params: {\n      slug: page.replace(/\\.mdx/, \"\"),\n    },\n  }));\n\n  return {\n    paths,\n    fallback: false,\n  };\n}\n\nexport async function getStaticProps({ params }) {\n  const { source, frontmatter } = await getFileBySlug(\"pages\", params.slug);\n\n  return {\n    props: {\n      source,\n      frontmatter,\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}