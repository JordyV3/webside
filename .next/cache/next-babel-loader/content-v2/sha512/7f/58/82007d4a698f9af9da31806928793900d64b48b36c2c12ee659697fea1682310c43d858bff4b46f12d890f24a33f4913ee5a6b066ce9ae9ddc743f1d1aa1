{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/jordy/Documents/GitHub/webside/pages/blog.js\";\nimport { useRef, useEffect, useState } from \"react\";\nimport NextLink from \"next/link\";\nimport { Layout, PostListItem, ScrollToTop, elements as UI } from \"@/components\";\nimport { formatDate } from \"@/lib/format-date\";\nimport { orderByDate } from \"@/lib/order-by-date\";\nimport { getAllFilesFrontMatter } from \"@/lib/mdx\";\nimport { usePagination } from \"@/lib/use-pagination\";\nexport default function Blog({\n  posts\n}) {\n  const {\n    next,\n    currentPage,\n    currentData,\n    maxPage\n  } = usePagination(posts, 10);\n  const {\n    0: element,\n    1: setElement\n  } = useState(null);\n  const observer = useRef();\n  const prevY = useRef(0);\n  const currentPosts = currentData();\n  useEffect(() => {\n    observer.current = new IntersectionObserver(entries => {\n      const firstEntry = entries[0];\n      const y = firstEntry.boundingClientRect.y;\n\n      if (prevY.current > y) {\n        next();\n      }\n\n      prevY.current = y;\n    }, {\n      threshold: 0.5\n    });\n  }, []);\n  useEffect(() => {\n    const currentElement = element;\n    const currentObserver = observer.current;\n\n    if (currentElement) {\n      currentObserver.observe(currentElement);\n    }\n\n    return () => {\n      if (currentElement) {\n        currentObserver.unobserve(currentElement);\n      }\n    };\n  }, [element]);\n  const metadata = {\n    title: \"Últimos Artículos\"\n  };\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    type: \"post\",\n    metadata: metadata,\n    children: [/*#__PURE__*/_jsxDEV(ScrollToTop, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), currentPosts && currentPosts.map(post => /*#__PURE__*/_jsxDEV(NextLink, {\n      href: post.slug,\n      children: /*#__PURE__*/_jsxDEV(\"a\", {\n        children: /*#__PURE__*/_jsxDEV(PostListItem, {\n          title: post.title,\n          date: formatDate(post.date),\n          tags: post.tags\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }, this)\n    }, post.slug, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }, this)), currentPage !== maxPage && /*#__PURE__*/_jsxDEV(UI.Text, {\n      fontSize: \"xl\",\n      fontWeight: \"bold\",\n      p: 6,\n      ref: setElement,\n      children: \"Cargando...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\nexport async function getStaticProps() {\n  const unorderedPosts = await getAllFilesFrontMatter(\"posts\");\n  const posts = unorderedPosts.sort(orderByDate);\n  return {\n    props: {\n      posts\n    }\n  };\n}","map":{"version":3,"sources":["/Users/jordy/Documents/GitHub/webside/pages/blog.js"],"names":["useRef","useEffect","useState","NextLink","Layout","PostListItem","ScrollToTop","elements","UI","formatDate","orderByDate","getAllFilesFrontMatter","usePagination","Blog","posts","next","currentPage","currentData","maxPage","element","setElement","observer","prevY","currentPosts","current","IntersectionObserver","entries","firstEntry","y","boundingClientRect","threshold","currentElement","currentObserver","observe","unobserve","metadata","title","map","post","slug","date","tags","getStaticProps","unorderedPosts","sort","props"],"mappings":"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","sourcesContent":["import { useRef, useEffect, useState } from \"react\";\nimport NextLink from \"next/link\";\n\nimport {\n  Layout,\n  PostListItem,\n  ScrollToTop,\n  elements as UI,\n} from \"@/components\";\nimport { formatDate } from \"@/lib/format-date\";\nimport { orderByDate } from \"@/lib/order-by-date\";\nimport { getAllFilesFrontMatter } from \"@/lib/mdx\";\nimport { usePagination } from \"@/lib/use-pagination\";\n\nexport default function Blog({ posts }) {\n  const { next, currentPage, currentData, maxPage } = usePagination(posts, 10);\n  const [element, setElement] = useState(null);\n  const observer = useRef();\n  const prevY = useRef(0);\n\n  const currentPosts = currentData();\n\n  useEffect(() => {\n    observer.current = new IntersectionObserver(\n      (entries) => {\n        const firstEntry = entries[0];\n        const y = firstEntry.boundingClientRect.y;\n\n        if (prevY.current > y) {\n          next();\n        }\n        prevY.current = y;\n      },\n      { threshold: 0.5 }\n    );\n  }, []);\n\n  useEffect(() => {\n    const currentElement = element;\n    const currentObserver = observer.current;\n\n    if (currentElement) {\n      currentObserver.observe(currentElement);\n    }\n\n    return () => {\n      if (currentElement) {\n        currentObserver.unobserve(currentElement);\n      }\n    };\n  }, [element]);\n\n  const metadata = {\n    title: \"Últimos Artículos\",\n  };\n\n  return (\n    <Layout type=\"post\" metadata={metadata}>\n      <ScrollToTop />\n      {currentPosts &&\n        currentPosts.map((post) => (\n          <NextLink href={post.slug} key={post.slug}>\n            <a>\n              <PostListItem\n                title={post.title}\n                date={formatDate(post.date)}\n                tags={post.tags}\n              />\n            </a>\n          </NextLink>\n        ))}\n      {currentPage !== maxPage && (\n        <UI.Text fontSize=\"xl\" fontWeight=\"bold\" p={6} ref={setElement}>\n          Cargando...\n        </UI.Text>\n      )}\n    </Layout>\n  );\n}\n\nexport async function getStaticProps() {\n  const unorderedPosts = await getAllFilesFrontMatter(\"posts\");\n  const posts = unorderedPosts.sort(orderByDate);\n\n  return {\n    props: { posts },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}