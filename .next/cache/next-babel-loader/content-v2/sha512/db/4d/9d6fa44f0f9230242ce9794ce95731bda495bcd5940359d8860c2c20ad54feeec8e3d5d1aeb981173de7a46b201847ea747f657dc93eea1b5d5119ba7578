{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from 'react';\nexport function usePagination(data, itemsPerPage) {\n  _s();\n\n  var _useState = useState(1),\n      currentPage = _useState[0],\n      setCurrentPage = _useState[1];\n\n  var maxPage = Math.ceil(data.length / itemsPerPage);\n\n  var currentData = function currentData() {\n    var begin = (currentPage - 1) * itemsPerPage;\n    var end = begin + itemsPerPage;\n    return data.slice(null, end);\n  };\n\n  var next = function next() {\n    setCurrentPage(function (currentPage) {\n      return Math.min(currentPage + 1, maxPage);\n    });\n  };\n\n  return {\n    next: next,\n    currentData: currentData,\n    currentPage: currentPage,\n    maxPage: maxPage\n  };\n}\n\n_s(usePagination, \"6xAUoJ2motYJ38x4zeUWisA+X/4=\");","map":{"version":3,"sources":["/Users/jordy/Documents/GitHub/webside/lib/use-pagination.js"],"names":["useState","usePagination","data","itemsPerPage","currentPage","setCurrentPage","maxPage","Math","ceil","length","currentData","begin","end","slice","next","min"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA,OAAO,SAASC,aAAT,CAAwBC,IAAxB,EAA8BC,YAA9B,EAA4C;AAAA;;AAAA,kBACXH,QAAQ,CAAC,CAAD,CADG;AAAA,MAC1CI,WAD0C;AAAA,MAC7BC,cAD6B;;AAGjD,MAAMC,OAAO,GAAGC,IAAI,CAACC,IAAL,CAAUN,IAAI,CAACO,MAAL,GAAcN,YAAxB,CAAhB;;AAEA,MAAMO,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxB,QAAMC,KAAK,GAAG,CAACP,WAAW,GAAG,CAAf,IAAoBD,YAAlC;AACA,QAAMS,GAAG,GAAGD,KAAK,GAAGR,YAApB;AACA,WAAOD,IAAI,CAACW,KAAL,CAAW,IAAX,EAAiBD,GAAjB,CAAP;AACD,GAJD;;AAMA,MAAME,IAAI,GAAG,SAAPA,IAAO,GAAM;AACjBT,IAAAA,cAAc,CAAC,UAACD,WAAD;AAAA,aAAiBG,IAAI,CAACQ,GAAL,CAASX,WAAW,GAAG,CAAvB,EAA0BE,OAA1B,CAAjB;AAAA,KAAD,CAAd;AACD,GAFD;;AAIA,SAAO;AAAEQ,IAAAA,IAAI,EAAJA,IAAF;AAAQJ,IAAAA,WAAW,EAAXA,WAAR;AAAqBN,IAAAA,WAAW,EAAXA,WAArB;AAAkCE,IAAAA,OAAO,EAAPA;AAAlC,GAAP;AAED;;GAjBeL,a","sourcesContent":["import { useState } from 'react';\n\nexport function usePagination (data, itemsPerPage) {\n  const [currentPage, setCurrentPage] = useState(1);\n\n  const maxPage = Math.ceil(data.length / itemsPerPage);\n\n  const currentData = () => {\n    const begin = (currentPage - 1) * itemsPerPage;\n    const end = begin + itemsPerPage;\n    return data.slice(null, end);\n  }\n\n  const next = () => {\n    setCurrentPage((currentPage) => Math.min(currentPage + 1, maxPage));\n  }\n\n  return { next, currentData, currentPage, maxPage };\n\n}"]},"metadata":{},"sourceType":"module"}